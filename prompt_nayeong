나는 FastAPI와 React(Tailwind CSS)를 이용해 미니 인스타그램 클론 프로젝트를 시작하려고 합니다. 핵심 목표는 사용자 인증 없이, 사진 업로드 기능과 좋아요 토글 기능이 포함된 게시물(Post) CRUD 기능을 구현하는 것입니다.

**[핵심 기술 스택]**
- 백엔드: FastAPI, SQLAlchemy(MySQL), 파일 업로드
- 프론트엔드: React(Vite), Tailwind CSS, Axios

**[필수 구현 기능]**
- **모델 속성**: id, description, image_url, likes_count(기본값 0), created_at
- **API 엔드포인트**: POST /posts (업로드), GET /posts (전체 조회), DELETE /posts/{id} (삭제), PATCH /posts/{id}/like (좋아요 토글)
- **프론트엔드 UI**: 게시물 등록 폼, 피드 목록, 좋아요/삭제 버튼

**[요청 사항]**
백엔드부터 시작합니다. 다음 4단계에 대한 Python 코드를 파일별로 작성하고 간결하게 설명해 주세요.
1. `database.py`: SQLAlchemy 엔진 및 세션 설정 코드 (MySQL/pymysql 기준)
2. `models.py`: 게시물(Post) 테이블 정의 코드
3. `schemas.py`: 요청(PostCreate) 및 응답(PostResponse) Pydantic 스키마 코드
4. `main.py`: FastAPI 기본 설정, CORS, 그리고 `models.Base.metadata.create_all()` 호출 및 `GET /posts` (전체 조회) 엔드포인트 코드.

====================================================================================================================================
--------------------database.py: DB 연결 및 세션 관리--------------------
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
# 환경 변수 관리를 위한 dotenv 사용을 가정합니다.
from dotenv import load_dotenv

load_dotenv()  # .env 파일에서 환경 변수를 로드

# TODO: 실제 환경에 맞게 DB_URL 수정 필요
# 예시: mysql+pymysql://유저명:비밀번호@호스트:포트/DB이름
DATABASE_URL = os.getenv("DATABASE_URL", "mysql+pymysql://root:password@localhost:3306/insta_clone_db")

# 1. 엔진 생성 (DB 연결)
engine = create_engine(
    DATABASE_URL, 
    pool_recycle=3600,  # MySQL 연결이 끊어지는 것을 방지 (1시간)
    echo=False          # 실행되는 SQL 쿼리를 터미널에 표시할지 여부
)

# 2. 세션 로컬 클래스 생성 (DB 세션 관리)
SessionLocal = sessionmaker(
    autocommit=False,  # 커밋을 수동으로 처리
    autoflush=False,   # 플러시(DB 반영)를 수동으로 처리
    bind=engine        # 생성된 엔진에 바인딩
)

# 3. Base 클래스 생성 (모델 정의의 기본)
Base = declarative_base()

# 4. DB 세션을 FastAPI 종속성으로 제공하는 함수
# 이 함수를 사용하여 FastAPI 엔드포인트에서 DB 세션을 얻습니다.
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

---------------------models.py: 게시물(Post) 테이블 정의----------------------
from sqlalchemy import Column, Integer, String, DateTime, func
from .database import Base

class Post(Base):
    __tablename__ = "posts"  # 테이블 이름

    # 모델 속성 정의 (요청한 필수 기능 반영)
    id = Column(Integer, primary_key=True, index=True)
    description = Column(String(500), index=True)
    image_url = Column(String(255), nullable=False) # 이미지 경로/URL은 필수
    likes_count = Column(Integer, default=0)
    created_at = Column(DateTime, default=func.now())

    # 추가: 업데이트 시간 추적 (선택적)
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    def __repr__(self):
        return f"<Post(id={self.id}, title='{self.description[:20]}...')>"

---------------------schemas.py: Pydantic 스키마 정의----------------------
from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

# 1. 게시물 생성 요청 시 필요한 데이터 (Create/Input Schema)
class PostCreate(BaseModel):
    # description은 없을 수도 있으므로 Optional로 처리
    description: Optional[str] = Field(None, max_length=500)
    # image_url은 파일 업로드 처리 후 백엔드에서 생성되므로,
    # 여기서는 클라이언트가 제공할 데이터만 정의합니다.
    # (실제 파일 업로드 로직은 main.py에서 별도로 처리해야 합니다.)

    # Pydantic 설정: ORM 모드 활성화 (DB 모델과 연동하기 위함)
    class Config:
        from_attributes = True

# 2. 게시물 응답 시 반환할 데이터 (Response/Output Schema)
class PostResponse(BaseModel):
    id: int
    description: Optional[str]
    image_url: str
    likes_count: int
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

-----------------------main.py: FastAPI 설정 및 GET /posts 엔드포인트----------------------------
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List

# 로컬 파일에서 필요한 모듈 임포트
from . import models, schemas
from .database import engine, get_db

# 1. 데이터베이스 테이블 생성
# 서버 시작 시, DB에 테이블이 없으면 생성합니다.
models.Base.metadata.create_all(bind=engine)

# 2. FastAPI 인스턴스 생성
app = FastAPI(
    title="Mini Instagram API",
    description="게시물(Post) CRUD 기능 구현 API",
)

# 3. CORS 설정 (프론트엔드 통신 허용)
# TODO: allow_origins에 프론트엔드 개발 서버 주소를 추가하세요.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://127.0.0.1:5173"], # React 개발 서버 포트
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 4. 루트 엔드포인트
@app.get("/")
async def root():
    return {"message": "Mini Instagram API 서버가 실행 중입니다."}

# 5. 전체 게시물 조회 엔드포인트 (GET /posts)
@app.get("/posts", response_model=List[schemas.PostResponse])
def get_all_posts(
    db: Session = Depends(get_db), # DB 세션을 주입받음
    skip: int = 0,
    limit: int = 100
):
    """
    모든 게시물 목록을 최신 순으로 조회합니다.
    """
    # 최신순(created_at 내림차순)으로 조회
    posts = db.query(models.Post).order_by(models.Post.created_at.desc()).offset(skip).limit(limit).all()

    return posts


================================================================================================================
백엔드 폴더 구조
backend/
├── main.py             <-- FastAPI 앱의 진입점 (설정, CORS, 라우터 등록)
├── database.py         <-- DB 연결 엔진, 세션, Base 정의
├── models.py           <-- SQLAlchemy 모델 (Post, User 등)
├── schemas.py          <-- Pydantic 스키마 (요청/응답 데이터 형식)
├── routers/            <-- API 엔드포인트(CRUD)를 기능별로 분리
│   └── post.py         <-- 게시물(Post) 관련 모든 API 엔드포인트
├── utils/              <-- 파일 업로드, 인증 등 유틸리티 함수
│   └── file_storage.py <-- 이미지 저장 및 URL 생성 로직
└── .env                <-- DB_URL 등을 위한 환경 변수 (이 폴더에도 둘 수 있음)


프론트엔드 폴더 구조
frontend/
├── public/
├── src/
│   ├── components/       <-- 재사용 가능한 작은 UI 요소
│   │   ├── PostCard.jsx  <-- 개별 게시물을 표시
│   │   ├── Header.jsx
│   │   └── Modal.jsx
│   ├── hooks/            <-- 커스텀 훅 (데이터 가져오기 로직 등)
│   │   └── usePosts.js   <-- 게시물 목록 조회, 추가 등 비동기 로직
│   ├── api/              <-- API 통신 전담 모듈 (Axios 설정)
│   │   └── postApi.js    <-- 백엔드 API 호출 함수들 (getPosts, createPost 등)
│   ├── App.jsx           <-- 메인 레이아웃 및 상태 관리
│   ├── main.jsx          <-- 앱의 진입점 (Vite 기본)
│   └── index.css         <-- Tailwind CSS 임포트 등 기본 스타일
├── package.json
└── tailwind.config.js
